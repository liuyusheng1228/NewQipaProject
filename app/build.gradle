plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'AndResGuard'
    id 'com.alibaba.arouter'
}
apply plugin: 'kotlin-kapt'
apply from: '../MobSDK.gradle'



android {
    compileSdk 31
    signingConfigs {
        config {
            keyAlias '7pabox'
            keyPassword '7paboxandroid'
            storeFile file('qpabox.keystore')
            storePassword 'androidgamebox'
        }
        release {
            keyAlias '7pabox'
            keyPassword '7paboxandroid'
            storeFile file('qpabox.keystore')
            storePassword 'androidgamebox'
        }
        debug {
            keyAlias '7pabox'
            keyPassword '7paboxandroid'
            storeFile file('qpabox.keystore')
            storePassword 'androidgamebox'
        }
    }


    defaultConfig {
        applicationId "com.qipa.newboxproject"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true
        flavorDimensions "BlackBox64"
//        ndk {
//            //选择要添加的对应 cpu 类型的 .so 库。
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
//            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
//        }

        manifestPlaceholders = [
                JPUSH_PKGNAME : applicationId,
                JPUSH_APPKEY : "a32109db64ebe04e2430bb01", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
        ]
    }

    productFlavors {
        BlackBox32 {
            applicationId "com.qipa.newboxproject"
            ndk {
                abiFilters "armeabi-v7a"
            }
            resValue "string", "app_name", "BlackBox32"
            manifestPlaceholders = [APP_ICON      : "@mipmap/ic_launcher",
                                    APP_ROUND_ICON: "@mipmap/ic_launcher_round"]
        }

        BlackBox64 {
            applicationId "com.qipa.newboxproject64"
            ndk {
                abiFilters "arm64-v8a"
            }
            resValue "string", "app_name", "BlackBox64"
            manifestPlaceholders = [APP_ICON      : "@mipmap/ic_launcher",
                                    APP_ROUND_ICON: "@mipmap/ic_launcher_round"]
        }

        BlackBox32Beta {
            applicationId "top.niunaijun.blackboxa32_beta"
            ndk {
                abiFilters "armeabi-v7a"
            }
            resValue "string", "app_name", "BlackBox32 Beta"
            manifestPlaceholders = [APP_ICON      : "@mipmap/ic_launcher_beta",
                                    APP_ROUND_ICON: "@mipmap/ic_launcher_round_beta"]
        }

        BlackBox64Beta {
            applicationId "top.niunaijun.blackboxa64_beta"
            ndk {
                abiFilters "arm64-v8a"
            }
            resValue "string", "app_name", "BlackBox64 Beta"
            manifestPlaceholders = [APP_ICON      : "@mipmap/ic_launcher_round_beta",
                                    APP_ROUND_ICON: "@mipmap/ic_launcher_round_beta"]
        }
    }

    //使用Kotlin实验特性
    androidExtensions {
        experimental = true
    }
    buildTypes {
        debug {

            jniDebuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-common.pro', 'proguard-module.pro', 'proguard-third-party.pro'
            shrinkResources false
//            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-common.pro', 'proguard-module.pro', 'proguard-third-party.pro'
            shrinkResources true
            zipAlignEnabled true
            pseudoLocalesEnabled true
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding true
        dataBinding = true
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
        ignoreWarnings true
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
        maxProcessCount 8
        preDexLibraries = false
        additionalParameters = [
                '--multi-dex',//多分包
                '--set-max-idx-number=60000'//每个包内方法数上限
        ]
    }
//    repositories  {
//        flatDir {
//            dirs 'libs'
//        }
//    }
    // 自定义打包apk的文件名
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFileName != null && outputFileName.endsWith('.apk')) {
                outputFileName = "${BuildConfig.applicationId}" +
                        "_${BuildConfig.versionCode}" +
                        "(${BuildConfig.versionName})" +
                        "_${variant.buildType.name}" +
                        ".apk"
            }
        }
    }

}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

repositories {
    flatDir {
        dirs 'libs'
    }
}
//configurations.all {
//    resolutionStrategy {
//        force 'androidx.core:core-ktx:1.3.2'
//    }
//}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
//    implementation project(":qipanetwork")
    implementation project(':Bcore')

    implementation project(':baseqipajetpackmvvm')
//    implementation 'com.qipa.jetpackmvvm:baseqipajetpackmvvm:1.0.0'

    implementation project(":qipaImBase")
    implementation project(':qipavideoplayer')
//    api project(path: ':Lib_Skin:PaintedSkin')
//    annotationProcessor project(path: ':Lib_Skin:Plugin:AopPlugin')
//    api project(path: ':Lib_Skin:Plugin:AopPlugin')
//    api project(path: ':Lib_Skin:ConstraintLayoutCompat')


//    implementation project(':blurkit')
}

andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // It will keep the origin path of your resources when it's true
    keepRoot = false
    // If set, name column in arsc those need to proguard will be kept to this value
    fixedResName = "arg"
    // It will merge the duplicated resources, but don't rely on this feature too much.
    // it's always better to remove duplicated resource from repo
    mergeDuplicatedRes = true
    whiteList = [
            "R.layout.super_sdk_login_activity",
            "R.id.sdk_facebook_login",
            "R.id.sdk_google_login",
            "R.id.sdk_naver_login",
            "R.id.privacy_policy",
            "R.id.go_privacy_policy",
            "R.id.go_service",
            // your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key",
            "R.string.project_id",
            "R.id.ssdk*",
            "R.string.mobcommon*",
            "R.string.ssdk*",
            "R.string.mobdemo*",
            "R.drawable.mobcommon*",
            "R.drawable.ssdk*",
            "R.drawable.ic_gm*",
            "R.drawable.flag_cn*",
            "R.drawable.flag_us*",
            "R.drawable.flag_jp*",
            "R.drawable.flag_kr*",
            "R.drawable.flag_vn*",
            "R.drawable.flag_ca*",
            "R.drawable.offline*",
            "R.layout.mob*",
            "R.style.mobcommon*",

    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "*.json",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.21'
        //path = "/usr/local/bin/7za"
    }

    /**
     * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
     * to the path which assemble[Task] write to
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
     * Only works in V1signing, default value is "SHA-1"
     **/
    // digestalg = "SHA-256"
}